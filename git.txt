git pull - to update your  local repo
git add-
git status
git commit-m - commiting data to send  it remote repo
git status
git checkout -b feature/role_test_iperf
git add .
git commit --amend

git push - send the date to remote repo


git fetch - to update the remote repo data
git clone - to download remote repo data

how to create a branch in git-
git branch branch1
git checkout branch1


install java on ec2
1.create a file name java
2.link - wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.rpm
3.installing package -sudo rpm -i filename

install jenkins
https://www.youtube.com/watch?v=jmm8DsosBqw


how to move contents in the folder - mv * ../

install tomcat 
https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-8-on-centos-7

https://www.youtube.com/watch?v=m21nFreFw8A
Ansible




Sudo yum install ansible
Useradd ansible
Be an ansible user and generate ssh password less connection 
Be an ansible user and create inventory 
Be a cloud user and edit the sudo files and give sudo access to ansible

sudo yum install ansible.
sudo su - ansible
ssh-keygen (accept all defaults: press enter for each prompt)
Copy the public key to both node1 and node2.
As the ansible user on the control host:
ssh-copy-id node1 (accept the host key if prompted, authenticate as ansible user)
ssh-copy-id node2 (accept the host key if prompted, authenticate as ansible user)

sudo su - ansible (if not already ansible user)
touch /home/ansible/inventory
echo "node1" >> /home/ansible/inventory
echo "node2" >> /home/ansible/inventory

Log in to node1 as cloud_user and edit the sudoers file to contain appropriate access for the ansible user:
ssh cloud_user@node1
sudo visudo
Add the following line to the file and save:
ansible    ALL=(ALL)       NOPASSWD: ALL
Repeate these steps for node2.

To verify each node, run the following as the ansible user from the control host:
ansible -i /home/ansible/inventory node1 -m ping
ansible -i /home/ansible/inventory node2 -m ping
To redirect output of a successful command to /home/ansible/output:
ansible -i /home/ansible/inventory node1 -m ping > /home/ansible/output

scp ansible_iperf_client.sh 10.227.9.134:/home/amd/ansible

chmod +x ./ansible_iperf_client.sh
iperf -c chmod +x ./ansible_iperf_client.sh

./iperf_client.sh
python iperf_client.py client "10.227.9.134" "22224 22225"

scp run-fio.yml 10.227.9.90:/home/amd/ansible

./iperf_server.sh

cat iperf_thd*
cat *.out
ansible-playbook -i hosts iperf_server.yml

ansible-playbook -i locahost run-fio.yml

#Playbook execution
-------------------
ansible-playbook -i hosts iperf_server.yml
ansible-playbook -i hosts iperf_client.yml

#To display output more indetail in json format
-----------------------------------------------
ansible-playbook -i hosts iperf_server.yml -vvv
vi


scp FIO 10.227.9.90:/home/amd/ansible

#Python direct invocation in shell
------------------------
python iperf_client.py client "10.227.9.134"

args:
    executable: /bin/bash

R W X
4 2 1

5=RX
7= RWX

0755

ansible-playbook -i hosts run-fio.yml -k
apt-get install sshpass
